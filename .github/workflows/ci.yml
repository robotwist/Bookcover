name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_ENV: test
  CI: true

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x]
        os: [ubuntu-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci
      env:
        NODE_ENV: development

    - name: Debug environment
      run: |
        echo "Node version: $(node -v)"
        echo "NPM version: $(npm -v)"
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo "Node modules:"
        ls -la node_modules

    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test
        CI: true
        DEBUG: jest

    - name: Run linting
      run: npm run lint
      continue-on-error: true

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          coverage/
        if-no-files-found: error

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci
      env:
        NODE_ENV: production

    - name: Build extension
      run: npm run build
      env:
        NODE_ENV: production

    - name: Verify build artifacts
      run: |
        echo "Build directory contents:"
        ls -la dist/
        echo "Artifact sizes:"
        du -sh dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: extension-build
        path: dist/
        if-no-files-found: error

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: extension-build
        path: dist

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify
    needs: [test, build, release]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          const { owner, repo } = context.repo;
          const run_id = context.runId;
          const run_url = `https://github.com/${owner}/${repo}/actions/runs/${run_id}`;
          
          await github.rest.issues.create({
            owner,
            repo,
            title: `CI/CD Pipeline Failed - Run #${run_id}`,
            body: `The CI/CD pipeline failed. Please check the [workflow run](${run_url}) for details.`
          }); 